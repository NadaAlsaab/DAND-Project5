{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Analyzing the Stroop Effect\n",
    "Perform the analysis in the space below. Remember to follow [the instructions](https://docs.google.com/document/d/1-OkpZLjG_kX9J6LIQ5IltsqMzVWjh36QpnP2RYpVdPU/pub?embedded=True) and review the [project rubric](https://review.udacity.com/#!/rubrics/71/view) before submitting. Once you've completed the analysis and write-up, download this file as a PDF or HTML file, upload that PDF/HTML into the workspace here (click on the orange Jupyter icon in the upper left then Upload), then use the Submit Project button at the bottom of this page. This will create a zip file containing both this .ipynb doc and the PDF/HTML doc that will be submitted for your project.\n",
    "\n",
    "\n",
    "(1) What is the independent variable? What is the dependent variable?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- **Independent variable:** List of congruent and incongruent words.\n",
    "- **Dependent variable:** Duration of the time that taken by participants to complete the test."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(2) What is an appropriate set of hypotheses for this task? Specify your null and alternative hypotheses, and clearly define any notation used. Justify your choices."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- **H0: Null hypothesis:** μC = μI <br> \n",
    "Which means the population of response time for congruent words equals the population response for incongruent words.\n",
    "- **H1: Alternative hypothesis:** μC != μI <br> \n",
    "Which means the population of response time for congruent words does not equal the population response for incongruent words."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "24"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "% matplotlib inline\n",
    "df = pd.read_csv('stroopdata.csv')\n",
    "len(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can notice that the data is a sample of 24 pairs, so I will implement a paired sample t-test to compare the population of response time for congruent and incongruent words."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(3) Report some descriptive statistics regarding this dataset. Include at least one measure of central tendency and at least one measure of variability. The name of the data file is 'stroopdata.csv'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Congruent  Incongruent\n",
      "0      12.079       19.278\n",
      "1      16.791       18.741\n",
      "2       9.564       21.214\n",
      "3       8.630       15.687\n",
      "4      14.669       22.803\n",
      "5      12.238       20.878\n",
      "6      14.692       24.572\n",
      "7       8.987       17.394\n",
      "8       9.401       20.762\n",
      "9      14.480       26.282\n",
      "10     22.328       24.524\n",
      "11     15.298       18.644\n",
      "12     15.073       17.510\n",
      "13     16.929       20.330\n",
      "14     18.200       35.255\n",
      "15     12.130       22.158\n",
      "16     18.495       25.139\n",
      "17     10.639       20.429\n",
      "18     11.344       17.425\n",
      "19     12.369       34.288\n",
      "20     12.944       23.894\n",
      "21     14.233       17.960\n",
      "22     19.710       22.058\n",
      "23     16.004       21.157\n"
     ]
    }
   ],
   "source": [
    "# Perform the analysis here\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Congruent</th>\n",
       "      <th>Incongruent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>24.000000</td>\n",
       "      <td>24.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>14.051125</td>\n",
       "      <td>22.015917</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>3.559358</td>\n",
       "      <td>4.797057</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>8.630000</td>\n",
       "      <td>15.687000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>11.895250</td>\n",
       "      <td>18.716750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>14.356500</td>\n",
       "      <td>21.017500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>16.200750</td>\n",
       "      <td>24.051500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>22.328000</td>\n",
       "      <td>35.255000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Congruent  Incongruent\n",
       "count  24.000000    24.000000\n",
       "mean   14.051125    22.015917\n",
       "std     3.559358     4.797057\n",
       "min     8.630000    15.687000\n",
       "25%    11.895250    18.716750\n",
       "50%    14.356500    21.017500\n",
       "75%    16.200750    24.051500\n",
       "max    22.328000    35.255000"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can notice that the mean and the std of incongruent are larger than congruent."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(4) Provide one or two visualizations that show the distribution of the sample data. Write one or two sentences noting what you observe about the plot or plots."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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mETC79SpE2vXruVHP/pRYpmHHnqIa6+9lvvuu4+srCzGjRtXZF933nkngwYNolOnTvTu3Ttx9eHixYsZOXIkNWrUICMjgz//+c/FxhuVSnVP29zcXNcNUEpHl2VGpBJdlrls2TJOOeWUig6jzGzfvp169erh7txwww20atWKESNGVHRYVUJRnwUzm+/uuem8X7V0RKRcjR07lpycHE499VS++OILhg0bVtEhxYaGdESkXI0YMUJH9BVER/giIjGhhC8iEhNK+CIiMaGELyISEzppK1LVlPXlqGlcglqvXr1EgbLqaNKkSbRu3Zq2bdseMH/r1q2ceOKJbNq0CTNjzpw59OjRgzVr1tC0aVO++OILWrRowaZNm6hR4+COn8tz2+oIX0SqnHRKJpTGpEmTWLr026W+jjzySBo1asSyZcsADiifDEFdn65du6ad7Ms67tJSwheRtKUqezxv3jx69OhBhw4d6NKlC9u2bWPXrl1cc801tG/fno4dO/L2228DMH78eC688EL69etHq1at+PnPf57o47HHHqN169b06dOHIUOGJEokFy5DPGrUKO6///7E+9q1a5co2fD000/TpUsXcnJyGDZsGPv27QOCo+lf/vKXdOjQgW7duvHZZ58xe/ZsXn31VUaOHElOTg7//ve/D1jnwuWTR4wYccDzguJq+fn5dOvWjdNOO40BAwYkSir06dOHO+64g969ezNmzBhWrlxJ9+7d6dy5M//1X/+V6Gf9+vX06tWLnJwc2rVr960yzmVBCV9ESqWossdff/01l1xyCWPGjEmUSq5Tpw4PP/wwEJQVeO655xg8eHCiCFp+fj4TJkxg8eLFTJgwgTVr1rBu3Tr++7//m3fffZc333zzWyUakssQF2fZsmVMmDCBWbNmkZ+fT82aNRO1bXbs2EG3bt1YtGgRvXr1YuzYsfTo0YP+/ftz3333kZ+fz4knnnhAe8nlk1esWMHAgQMpqAiQXD75qquu4p577uGDDz6gffv23HXXXYk2tm7dyvTp0/npT3/KzTffzPXXX8+8efNo1KhRYplnn32W733ve4ly0zk5OQe1f1JRwheRUimq7PGHH37I8ccfT+fOnQE44ogjqFWrFjNnzuTKK68EgsJpzZs3TxQ6O/vss2nQoAGZmZm0bduW1atXM3fuXHr37s3RRx9NRkYGAwcOPKDv5DLE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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f78d2d19be0>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Build the visualizations here\n",
    "plt.hist(df.Congruent, alpha=0.6, label='Congruent Words')\n",
    "plt.hist(df.Incongruent, alpha=0.6, label='Incongruent Words')\n",
    "plt.xlabel('Response time (seconds)')\n",
    "plt.ylabel('Frequency')\n",
    "plt.legend(loc='upper right')\n",
    "plt.title('Congruent vs Incongruent');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From this histogram we can notice that the response time of the incongruent words is longer than congruent words."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(5)  Now, perform the statistical test and report your results. What is your confidence level or Type I error associated with your test? What is your conclusion regarding the hypotheses you set up? Did the results match up with your expectations? **Hint:**  Think about what is being measured on each individual, and what statistic best captures how an individual reacts in each environment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ttest_relResult(statistic=-8.020706944109957, pvalue=4.1030005857111781e-08)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Perform the statistical test here\n",
    "from scipy.stats import ttest_rel\n",
    "ttest_rel(df['Congruent'], df['Incongruent'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The results show that t-statistic equals to -8.02 and the p-value equals 4.1."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Critical value calculation: based on t-table (link in references)\n",
    "- alpha value equals 0.05 \n",
    "- 0.25 for each tail\n",
    "- so t-critical equals +2.069 and -2.069"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since t-statistic (-8.02) is smaller than t-critical (-2.07), we will reject the null hypothesis. So there is a significant difference in response time between congruent and incongruent words. We conclude that reconizing the congruent is faster than incongruent words, which meets our results in Q4.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### References\n",
    "- http://www.ttable.org"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
